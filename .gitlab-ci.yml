image: node:18

variables:
  MAIN_BRANCH: main
  DEVELOP_BRANCH: develop
  VITE_APP_API_URL: ${VITE_APP_API_URL}

# Removing specific tags to use any available runner
# Cache dependencies for faster builds
cache:
  key:
    files:
      - frontend/package-lock.json
  paths:
    - frontend/node_modules/
    - frontend/.npm/
    - .yarn-cache/

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $MAIN_BRANCH
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $DEVELOP_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - setup
  - quality
  - test
  - build
  - security
  - performance
  - deploy

# Frontend Setup
frontend-install:
  stage: setup
  script:
    - cd frontend
    - npm install --legacy-peer-deps
  artifacts:
    paths:
      - frontend/node_modules/
    expire_in: 1 day
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/node_modules/
      - frontend/.npm/
    policy: pull-push

# Code Quality Checks
frontend-lint:
  stage: quality
  needs: ["frontend-install"]
  script:
    - cd frontend
    - npm run lint
  allow_failure: false

frontend-type-check:
  stage: quality
  needs: ["frontend-install"]
  script:
    - cd frontend
    - npx tsc --noEmit
  allow_failure: false

# Testing
frontend-unit-test:
  stage: test
  needs: ["frontend-install"]
  script:
    - cd frontend
    - npm run test
  coverage: '/Lines\s*:\s*([0-9]*\.?[0-9]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    paths:
      - frontend/coverage/
    expire_in: 1 week

# Build Stage
frontend-build:
  stage: build
  needs: ["frontend-install", "frontend-lint", "frontend-type-check", "frontend-unit-test"]
  script:
    - cd frontend
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 week

# Security Checks
frontend-dependency-scan:
  stage: security
  needs: ["frontend-install"]
  script:
    - cd frontend
    - npm install -g audit-ci
    - audit-ci --moderate
    - npm install -g snyk
    - snyk test || true
    - snyk monitor || true
  allow_failure: true
  artifacts:
    reports:
      dependency_scanning: frontend/dependency-scan.json
      sast: frontend/sast-report.json

# Bundle Analysis
frontend-bundle-analysis:
  stage: performance
  needs: ["frontend-build"]
  script:
    - cd frontend
    - npx vite-bundle-visualizer
  artifacts:
    paths:
      - frontend/stats.html
    expire_in: 1 week

# Lighthouse Performance Check
frontend-lighthouse:
  stage: performance
  image: cypress/browsers:node18.12.0-chrome107
  needs: ["frontend-build"]
  script:
    - npm install -g @lhci/cli@0.11.x
    - cd frontend
    - lhci autorun || true
  artifacts:
    paths:
      - frontend/.lighthouseci/
    expire_in: 1 week

# Preview Deployment
deploy-preview:
  stage: deploy
  needs: ["frontend-build"]
  script:
    - cd frontend
    - echo "Deploying preview environment"
    # Add your preview deployment commands here
  environment:
    name: preview/$CI_COMMIT_REF_NAME
    url: https://$CI_COMMIT_REF_SLUG.preview.tree8global.com
  rules:
    - if: $CI_MERGE_REQUEST_ID

# Staging Deployment
deploy-staging:
  stage: deploy
  needs: ["frontend-build"]
  script:
    - cd frontend
    - echo "Deploying to staging"
    # Add your staging deployment commands here
  environment:
    name: staging
    url: https://staging.tree8global.com
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOP_BRANCH

# Production Deployment
deploy-production:
  stage: deploy
  needs: ["frontend-build"]
  script:
    - cd frontend
    - echo "Deploying to production"
    # Add your production deployment commands here
  environment:
    name: production
    url: https://tree8global.com
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
  when: manual

# Cleanup job
cleanup:
  stage: .post
  script:
    - echo "Cleaning up resources"
  when: always
